// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coordinator/v1/coordinator.proto

// Namespace for the coordinator service
// The fn0rd.coordinator.v1 package contains definitions for the distributed computation coordination system
package coordinatorconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/fn0rd-io/protobuf/coordinator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CoordinatorServiceName is the fully-qualified name of the CoordinatorService service.
	CoordinatorServiceName = "fn0rd.coordinator.v1.CoordinatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CoordinatorServiceStreamProcedure is the fully-qualified name of the CoordinatorService's Stream
	// RPC.
	CoordinatorServiceStreamProcedure = "/fn0rd.coordinator.v1.CoordinatorService/Stream"
)

// CoordinatorServiceClient is a client for the fn0rd.coordinator.v1.CoordinatorService service.
type CoordinatorServiceClient interface {
	// Stream establishes a bidirectional connection between client and coordinator
	// Clients can send registration and result submission messages
	// The coordinator can send computational targets and other control messages
	Stream(context.Context) *connect.BidiStreamForClient[v1.StreamRequest, v1.StreamResponse]
}

// NewCoordinatorServiceClient constructs a client for the fn0rd.coordinator.v1.CoordinatorService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoordinatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CoordinatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	coordinatorServiceMethods := v1.File_coordinator_v1_coordinator_proto.Services().ByName("CoordinatorService").Methods()
	return &coordinatorServiceClient{
		stream: connect.NewClient[v1.StreamRequest, v1.StreamResponse](
			httpClient,
			baseURL+CoordinatorServiceStreamProcedure,
			connect.WithSchema(coordinatorServiceMethods.ByName("Stream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// coordinatorServiceClient implements CoordinatorServiceClient.
type coordinatorServiceClient struct {
	stream *connect.Client[v1.StreamRequest, v1.StreamResponse]
}

// Stream calls fn0rd.coordinator.v1.CoordinatorService.Stream.
func (c *coordinatorServiceClient) Stream(ctx context.Context) *connect.BidiStreamForClient[v1.StreamRequest, v1.StreamResponse] {
	return c.stream.CallBidiStream(ctx)
}

// CoordinatorServiceHandler is an implementation of the fn0rd.coordinator.v1.CoordinatorService
// service.
type CoordinatorServiceHandler interface {
	// Stream establishes a bidirectional connection between client and coordinator
	// Clients can send registration and result submission messages
	// The coordinator can send computational targets and other control messages
	Stream(context.Context, *connect.BidiStream[v1.StreamRequest, v1.StreamResponse]) error
}

// NewCoordinatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoordinatorServiceHandler(svc CoordinatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	coordinatorServiceMethods := v1.File_coordinator_v1_coordinator_proto.Services().ByName("CoordinatorService").Methods()
	coordinatorServiceStreamHandler := connect.NewBidiStreamHandler(
		CoordinatorServiceStreamProcedure,
		svc.Stream,
		connect.WithSchema(coordinatorServiceMethods.ByName("Stream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fn0rd.coordinator.v1.CoordinatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CoordinatorServiceStreamProcedure:
			coordinatorServiceStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCoordinatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoordinatorServiceHandler struct{}

func (UnimplementedCoordinatorServiceHandler) Stream(context.Context, *connect.BidiStream[v1.StreamRequest, v1.StreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fn0rd.coordinator.v1.CoordinatorService.Stream is not implemented"))
}
